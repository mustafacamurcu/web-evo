struct Bot {
  position: vec4f,
  velocity: vec4f,
  score: f32,
}; // 16 bytes * 3 = 48 bytes

@group(0) @binding(0) var<storage, read_write> in_bots: array<Bot, 100>;
@group(0) @binding(1) var<storage, read_write> out_bots: array<Bot, 100>;


@compute @workgroup_size(1) fn main(
	@builtin(global_invocation_id) id: vec3u
) {
	out_bots[id.x].position = in_bots[id.x].position + in_bots[id.x].velocity;
	out_bots[id.x].velocity = in_bots[id.x].velocity + in_bots[(id.x-1+100)%100].velocity/100.0 - in_bots[(id.x+1)%100].velocity/100.0;

	// Bounce off walls
	if (out_bots[id.x].position.x < -1.0 || out_bots[id.x].position.x > 1.0) {
		out_bots[id.x].velocity.x = -out_bots[id.x].velocity.x;
	}
	if (out_bots[id.x].position.y < -1.0 || out_bots[id.x].position.y > 1.0) {
		out_bots[id.x].velocity.y = -out_bots[id.x].velocity.y;
	}


	out_bots[id.x].score = in_bots[id.x].score + 1.0;
}